#!/usr/bin/env node

const app = require('../app');  // Import the app from app.js
const debug = require('debug')('quizitbackend:server');
const http = require('http');
const portfinder = require('portfinder');

// Set up port range for portfinder.
portfinder.basePort = parseInt(process.env.BASE_APP_PORT, 10);
portfinder.highestPort = parseInt(process.env.MAX_APP_PORT, 10);

async function startServer() {
  let port;
  try {
    port = await portfinder.getPortPromise();
  } catch (error) {
    console.error('Could not find an available port:', error);
    process.exit(1);
  }

  // Create and start HTTP server
  const server = http.createServer(app);
  server.listen(port);
  server.on('error', (error) => onError(error, port));
  server.on('listening', () => onListening(server, port));
}

// Error event listener
function onError(error, port) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Listening event listener
function onListening(server, port) {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Server is running on ${bind}`);
}

// Start the server
startServer();
